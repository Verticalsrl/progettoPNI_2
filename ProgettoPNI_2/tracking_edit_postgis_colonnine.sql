--aggiungo alcune colonne di appoggio per costruire i form di editing:ALTER TABLE mit_terminal_enclosure ADD COLUMN giunzioni integer;ALTER TABLE mit_terminal_enclosure ADD COLUMN cavi_attestati integer;/*-->source: http://postgis.net/workshops/postgis-intro/history_tracking.html--DROP TABLE mit_terminal_enclosure_history;--Create history table. This is the table we will use to store all the historical edit information. In addition to all the fields from mit_terminal_enclosure, we add five more fields:*/DROP TABLE IF EXISTS mit_terminal_enclosure_history;CREATE TABLE IF NOT EXISTS mit_terminal_enclosure_history ( created timestamp without time zone, created_by character varying(64), deleted timestamp without time zone, deleted_by character varying(64), like mit_terminal_enclosure);GRANT SELECT, UPDATE, INSERT, TRIGGER ON TABLE mit_terminal_enclosure_history TO operatore_r;--we import the current state of the active table into the history table, so we have a starting point to trace history from. Note that we fill in the creation time and creation user, but leave the deletion records NULL, but in case it exist already, I truncate it:TRUNCATE mit_terminal_enclosure_history;INSERT INTO mit_terminal_enclosure_history SELECT now(), current_user, null, null, * FROM mit_terminal_enclosure;--Now we need three triggers on the active table, for INSERT, DELETE and UPDATE actions. First we create the trigger functions, then bind them to the table as triggers.--For an insert, we just add a new record into the history table with the creation time/user:CREATE OR REPLACE FUNCTION mit_terminal_enclosure_insert() RETURNS trigger AS$$  BEGIN    INSERT INTO schemaDB.mit_terminal_enclosure_history VALUES (current_timestamp, current_user, null, null, NEW.*);    RETURN NEW;  END;$$LANGUAGE plpgsql;CREATE TRIGGER mit_terminal_enclosure_insert_trigger AFTER INSERT ON mit_terminal_enclosure FOR EACH ROW EXECUTE PROCEDURE mit_terminal_enclosure_insert();--For a deletion, we just mark the currently active history record (the one with a NULL deletion time) as deleted:CREATE OR REPLACE FUNCTION mit_terminal_enclosure_delete() RETURNS trigger AS$$  BEGIN    UPDATE schemaDB.mit_terminal_enclosure_history      SET deleted = current_timestamp, deleted_by = current_user      WHERE deleted IS NULL and gidd = OLD.gidd;    RETURN NULL;  END;$$LANGUAGE plpgsql;CREATE TRIGGER mit_terminal_enclosure_delete_trigger AFTER DELETE ON mit_terminal_enclosure FOR EACH ROW EXECUTE PROCEDURE mit_terminal_enclosure_delete();--For an update, we first mark the active history record as deleted, then insert a new record for the updated state:CREATE OR REPLACE FUNCTION mit_terminal_enclosure_update() RETURNS trigger AS$$  BEGIN    UPDATE schemaDB.mit_terminal_enclosure_history      SET deleted = current_timestamp, deleted_by = current_user      WHERE deleted IS NULL and gidd = OLD.gidd;    INSERT INTO schemaDB.mit_terminal_enclosure_history    VALUES      (current_timestamp, current_user, null, null, NEW.*);    RETURN NEW;  END;$$LANGUAGE plpgsql;CREATE TRIGGER mit_terminal_enclosure_update_trigger AFTER UPDATE ON mit_terminal_enclosure FOR EACH ROW EXECUTE PROCEDURE mit_terminal_enclosure_update();