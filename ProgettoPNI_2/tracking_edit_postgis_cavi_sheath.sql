/*-->source: http://postgis.net/workshops/postgis-intro/history_tracking.html--DROP TABLE sheath_with_loc_history;--Create history table. This is the table we will use to store all the historical edit information. In addition to all the fields from sheath_with_loc, we add five more fields:*/CREATE TABLE IF NOT EXISTS sheath_with_loc_history ( like sheath_with_loc, created timestamp without time zone, created_by character varying(64), deleted timestamp without time zone, deleted_by character varying(64));GRANT SELECT, UPDATE, INSERT, TRIGGER ON TABLE sheath_with_loc_history TO operatore_r;--we import the current state of the active table into the history table, so we have a starting point to trace history from. Note that we fill in the creation time and creation user, but leave the deletion records NULL, but in case it exist already, I truncate it:TRUNCATE sheath_with_loc_history;INSERT INTO sheath_with_loc_history SELECT *, now(), current_user, null, null FROM sheath_with_loc;--Now we need three triggers on the active table, for INSERT, DELETE and UPDATE actions. First we create the trigger functions, then bind them to the table as triggers.--For an insert, we just add a new record into the history table with the creation time/user:CREATE OR REPLACE FUNCTION sheath_with_loc_insert() RETURNS trigger AS$$  BEGIN    INSERT INTO schemaDB.sheath_with_loc_history VALUES (NEW.*, current_timestamp, current_user, null, null);    RETURN NEW;  END;$$LANGUAGE plpgsql;CREATE TRIGGER sheath_with_loc_insert_trigger AFTER INSERT ON sheath_with_loc FOR EACH ROW EXECUTE PROCEDURE sheath_with_loc_insert();--For a deletion, we just mark the currently active history record (the one with a NULL deletion time) as deleted:CREATE OR REPLACE FUNCTION sheath_with_loc_delete() RETURNS trigger AS$$  BEGIN    UPDATE schemaDB.sheath_with_loc_history      SET deleted = current_timestamp, deleted_by = current_user      WHERE deleted IS NULL and gidd = OLD.gidd;    RETURN NULL;  END;$$LANGUAGE plpgsql;CREATE TRIGGER sheath_with_loc_delete_trigger AFTER DELETE ON sheath_with_loc FOR EACH ROW EXECUTE PROCEDURE sheath_with_loc_delete();--For an update, we first mark the active history record as deleted, then insert a new record for the updated state:CREATE OR REPLACE FUNCTION sheath_with_loc_update() RETURNS trigger AS$$  BEGIN    UPDATE schemaDB.sheath_with_loc_history      SET deleted = current_timestamp, deleted_by = current_user      WHERE deleted IS NULL and gidd = OLD.gidd;    INSERT INTO schemaDB.sheath_with_loc_history    VALUES      (NEW.*, current_timestamp, current_user, null, null);    RETURN NEW;  END;$$LANGUAGE plpgsql;CREATE TRIGGER sheath_with_loc_update_trigger AFTER UPDATE ON sheath_with_loc FOR EACH ROW EXECUTE PROCEDURE sheath_with_loc_update();